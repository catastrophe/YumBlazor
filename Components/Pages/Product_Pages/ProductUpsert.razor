@page "/product/create"
@page "/product/update/{id:int}"
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IWebHostEnvironment _webHostEnvironment
@inject IJSRuntime _JS

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id == 0 ? "Create" : "Update") Product </h2>
                </div>
            </div>

        </div>
        <div class="card-body p-4">

            <EditForm Model="Product" FormName="ProductUpsertForm" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.Name" class="form-control" id="Name" placeholder="Name" />
                        <label for="Name">Name</label>
                        <ValidationSummary For="@(()=>Product.Name)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.Description" class="form-control" id="Description" placeholder="Description" />
                        <label for="Description">Description</label>
                        <ValidationSummary For="@(()=>Product.Description)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.SpecialTag" class="form-control" id="SpecialTag" placeholder="SpecialTag" />
                        <label for="SpecialTag">Special Tag</label>
                        <ValidationSummary For="@(()=>Product.SpecialTag)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="Product.Price" class="form-control" id="Price" placeholder="Price" />
                        <label for="Price">Price</label>
                        <ValidationSummary For="@(()=>Product.Price)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select" id="Category">
                            <option value="0" disabled selected>--Select Category--</option>
                            @foreach (var category in _categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <label for="Category">Category</label>
                        <ValidationSummary For="@(()=>Product.CategoryId)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        @if (Product.ImageUrl == null)
                        {
                            <InputFile OnChange="LoadFiles" class="form-control pb-3" id="customFile" accept="image/x-png,image/jpeg" />
                            <label for="customFile">Upload Image</label>
                        }
                        @if (Product.ImageUrl != null)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <img src="@Product.ImageUrl" alt="..." class="img-thumbnail">
                                </div>
                                <div>
                                    <div class="col-md-9">
                                        <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage">Remove</i>
                                    </div>
                                </div>
                            </div>
                        }

                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy2-fill"></i> @(Id == 0 ? "Create" : "Update") Product
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="product" type="submit" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>

            </EditForm>

        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();

    private IEnumerable<Category> _categories = new List<Category>();

    private string? _dirtectoryPath { get; set; }

    public bool IsProcessing { get; set; } = true;

    protected override Task OnInitializedAsync()
    {
        _dirtectoryPath = Path.Combine(_webHostEnvironment.WebRootPath, "images", "product");
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategoryList();
            IsProcessing = false;
            StateHasChanged();
        }

    }

    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
        {
            Product = await _productRepository.GetAsync(Id);
        }

        _categories = await _categoryRepository.GetAllAsync();

    }

    private async Task UpsertProduct()
    {
        IsProcessing = true;
        if (Product.Id > 0)

        {
            await _productRepository.UpdateAsync(Product);
            await _JS.ToastrSuccess("Product Updated Successfully");
        }
        else
        {
            await _productRepository.CreateAsync(Product);
            await _JS.ToastrSuccess("Product Created Successfully");
        }
        _navigationManager.NavigateTo("product");
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsProcessing = true;

        var file = e.File;
        FileInfo fileInfo = new(file.Name);
        var newFileName = $"{Guid.NewGuid()}.{fileInfo.Extension}";
        if (!Directory.Exists(_dirtectoryPath))
        {
            Directory.CreateDirectory(_dirtectoryPath);
        }
        var path = Path.Combine(_dirtectoryPath, newFileName);
        await using FileStream fileStream = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        Product.ImageUrl = $"/images/product/{newFileName}";


        IsProcessing = false;
    }

    void DeleteImage()
    {
        if (Product.ImageUrl == null)
            return;

        var fileToDelete = Product.ImageUrl.Split("/").Reverse().First();

        var filePathToDeleteImage = Path.Combine(_dirtectoryPath, fileToDelete);

        if (!File.Exists(filePathToDeleteImage))
            return;

        File.Delete(filePathToDeleteImage);
        Product.ImageUrl = null;
        return;
    }

}
